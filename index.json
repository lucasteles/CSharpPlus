{
  "api/CSharpPlus.ArrayExtensions.html": {
    "href": "api/CSharpPlus.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Brazil Models",
    "keywords": "Class ArrayExtensions Namespace CSharpPlus Assembly CSharpPlus.dll Enumerable Plus Extensions public static class ArrayExtensions Inheritance object ArrayExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ConcatArray<TSource>(TSource[], TSource[]) Sorts the elements of an array in ascending order. public static TSource[] ConcatArray<TSource>(this TSource[] @this, TSource[] other) Parameters this TSource[] other TSource[] Returns TSource[] Type Parameters TSource ConvertAll<TSource, TResult>(TSource[], Func<TSource, TResult>) Projects each element of an array into a new form. public static TResult[] ConvertAll<TSource, TResult>(this TSource[] @this, Func<TSource, TResult> selector) Parameters this TSource[] selector Func<TSource, TResult> Returns TResult[] Type Parameters TSource TResult Exist<TSource>(TSource[], Func<TSource, bool>) Determines whether the specified array contains elements that match the conditions defined by the specified predicate. public static bool Exist<TSource>(this TSource[] @this, Func<TSource, bool> predicate) Parameters this TSource[] predicate Func<TSource, bool> Returns bool Type Parameters TSource FindAll<TSource>(TSource[], Func<TSource, bool>) Filters an array of values based on a predicate. public static TSource[] FindAll<TSource>(this TSource[] @this, Func<TSource, bool> predicate) Parameters this TSource[] predicate Func<TSource, bool> Returns TSource[] Type Parameters TSource FindIndex<TSource>(TSource[], Func<TSource, bool>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire Array. public static int FindIndex<TSource>(this TSource[] @this, Func<TSource, bool> predicate) Parameters this TSource[] predicate Func<TSource, bool> Returns int Type Parameters TSource FindLastIndex<TSource>(TSource[], Func<TSource, bool>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire Array. public static int FindLastIndex<TSource>(this TSource[] @this, Func<TSource, bool> predicate) Parameters this TSource[] predicate Func<TSource, bool> Returns int Type Parameters TSource FindLast<TSource>(TSource[], Func<TSource, bool>) Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire Array. public static TSource? FindLast<TSource>(this TSource[] @this, Func<TSource, bool> predicate) Parameters this TSource[] predicate Func<TSource, bool> Returns TSource Type Parameters TSource Find<TSource>(TSource[], Func<TSource, bool>) Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Array. public static TSource? Find<TSource>(this TSource[] @this, Func<TSource, bool> predicate) Parameters this TSource[] predicate Func<TSource, bool> Returns TSource Type Parameters TSource SortBy<TSource, TKey>(TSource[], Func<TSource, TKey>) Sorts the elements of an array in ascending order according to a key. public static TSource[] SortBy<TSource, TKey>(this TSource[] @this, Func<TSource, TKey> selector) where TKey : IComparable<TKey> Parameters this TSource[] selector Func<TSource, TKey> Returns TSource[] Type Parameters TSource TKey Sort<TSource>(TSource[]) Sorts the elements of an array in ascending order. public static TSource[] Sort<TSource>(this TSource[] @this) Parameters this TSource[] Returns TSource[] Type Parameters TSource"
  },
  "api/CSharpPlus.AssemblyExtensions.html": {
    "href": "api/CSharpPlus.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | Brazil Models",
    "keywords": "Class AssemblyExtensions Namespace CSharpPlus Assembly CSharpPlus.dll Assembly Extensions public static class AssemblyExtensions Inheritance object AssemblyExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetAllImplementations<T>(Assembly) Get all non-abstract implementations of T public static IEnumerable<Type> GetAllImplementations<T>(this Assembly assembly) where T : notnull Parameters assembly Assembly Returns IEnumerable<Type> Type Parameters T InstantiateAllImplementations<T>(Assembly) Instantiate all non-abstract implementations of T with a public parameterless constructor public static IEnumerable<T> InstantiateAllImplementations<T>(this Assembly assembly) where T : notnull Parameters assembly Assembly Returns IEnumerable<T> Type Parameters T"
  },
  "api/CSharpPlus.CollectionExtensions.html": {
    "href": "api/CSharpPlus.CollectionExtensions.html",
    "title": "Class CollectionExtensions | Brazil Models",
    "keywords": "Class CollectionExtensions Namespace CSharpPlus Assembly CSharpPlus.dll Collection extensions public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AddRange<T>(ICollection<T>, IEnumerable<T>) Adds the elements of the specified collection to the end of the ICollection of T. public static void AddRange<T>(this ICollection<T> self, IEnumerable<T> items) Parameters self ICollection<T> items IEnumerable<T> Type Parameters T RemoveAt<T>(IList<T>, Index) Removes the list item at the specified index. public static void RemoveAt<T>(this IList<T> self, Index index) Parameters self IList<T> index Index Type Parameters T RemoveRange<T>(List<T>, Range) Removes the list item at the specified range. public static void RemoveRange<T>(this List<T> self, Range range) Parameters self List<T> range Range Type Parameters T"
  },
  "api/CSharpPlus.CompareResult.html": {
    "href": "api/CSharpPlus.CompareResult.html",
    "title": "Enum CompareResult | Brazil Models",
    "keywords": "Enum CompareResult Namespace CSharpPlus Assembly CSharpPlus.dll public enum CompareResult Extension Methods EnumerablePlus.ToSingleton<T>(T) Fields Equal = 0 Greater = 1 Smaller = -1"
  },
  "api/CSharpPlus.Data.ConcurrentValue-1.html": {
    "href": "api/CSharpPlus.Data.ConcurrentValue-1.html",
    "title": "Class ConcurrentValue<T> | Brazil Models",
    "keywords": "Class ConcurrentValue<T> Namespace CSharpPlus.Data Assembly CSharpPlus.dll Provide a way to manage shared, synchronous, independent state public sealed class ConcurrentValue<T> where T : class Type Parameters T Inheritance object ConcurrentValue<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods EnumerablePlus.ToSingleton<T>(T) Constructors ConcurrentValue(T) Provide a way to manage shared, synchronous, independent state public ConcurrentValue(T initialValue) Parameters initialValue T Properties Value public T Value { get; } Property Value T Methods Reset(T) public void Reset(T resetValue) Parameters resetValue T Update(Func<T, T>) public void Update(Func<T, T> updater) Parameters updater Func<T, T>"
  },
  "api/CSharpPlus.Data.html": {
    "href": "api/CSharpPlus.Data.html",
    "title": "Namespace CSharpPlus.Data | Brazil Models",
    "keywords": "Namespace CSharpPlus.Data Classes ConcurrentValue<T> Provide a way to manage shared, synchronous, independent state"
  },
  "api/CSharpPlus.DateTimeExtensions.html": {
    "href": "api/CSharpPlus.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | Brazil Models",
    "keywords": "Class DateTimeExtensions Namespace CSharpPlus Assembly CSharpPlus.dll DateTime Extensions public static class DateTimeExtensions Inheritance object DateTimeExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Now(TimeProvider) Returns current local DateTime public static DateTime Now(this TimeProvider provider) Parameters provider TimeProvider Returns DateTime ToDateOnly(DateTime) Returns a DateOnly instance that is set to the date part of the specified dateOnly. public static DateOnly ToDateOnly(this DateTime dateTime) Parameters dateTime DateTime Returns DateOnly ToDateOnly(DateTimeOffset) Returns a DateOnly instance that is set to the date part of the specified dateOnly. public static DateOnly ToDateOnly(this DateTimeOffset dateTime) Parameters dateTime DateTimeOffset Returns DateOnly ToDateTime(DateOnly) Returns a DateTime instance with the specified input kind that is set to the date of this DateOnly instance and the time at UTC 00:00AM. public static DateTime ToDateTime(this DateOnly dateOnly) Parameters dateOnly DateOnly Returns DateTime ToDateTime(DateOnly, DateTimeKind) Returns a DateTime instance with the specified input kind that is set to the date of this DateOnly instance and the time at 00:00AM. public static DateTime ToDateTime(this DateOnly dateOnly, DateTimeKind kind) Parameters dateOnly DateOnly kind DateTimeKind Returns DateTime ToDateTime(DateOnly, TimeSpan, DateTimeKind) Returns a DateTime instance with the specified input kind that is set to the date of this DateOnly instance and a TimeSpan public static DateTime ToDateTime(this DateOnly dateOnly, TimeSpan span, DateTimeKind kind = DateTimeKind.Utc) Parameters dateOnly DateOnly span TimeSpan kind DateTimeKind Returns DateTime ToIsoString(DateOnly) DateOnly string Invariant IS8601 string public static string ToIsoString(this DateOnly dateOnly) Parameters dateOnly DateOnly Returns string ToIsoString(DateTime) DateTime Invariant IS8601 string public static string ToIsoString(this DateTime date) Parameters date DateTime Returns string ToIsoString(DateTimeOffset) DateTime Invariant IS8601 string public static string ToIsoString(this DateTimeOffset date) Parameters date DateTimeOffset Returns string ToTimeOnly(DateTime) Constructs a TimeOnly object from a DateTime representing the time of the day in this DateTime object public static TimeOnly ToTimeOnly(this DateTime dateTime) Parameters dateTime DateTime Returns TimeOnly ToTimeOnly(TimeSpan) Constructs a TimeOnly object from a time span representing the time elapsed since midnight. public static TimeOnly ToTimeOnly(this TimeSpan span) Parameters span TimeSpan Returns TimeOnly ToUnixTimeSeconds(DateOnly) Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z public static long ToUnixTimeSeconds(this DateOnly dateTime) Parameters dateTime DateOnly Returns long ToUnixTimeSeconds(DateTime) Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z public static long ToUnixTimeSeconds(this DateTime dateTime) Parameters dateTime DateTime Returns long Today(TimeProvider) Returns current DateOnly public static DateOnly Today(this TimeProvider provider) Parameters provider TimeProvider Returns DateOnly UtcNow(TimeProvider) Returns current DateTime in UTC public static DateTime UtcNow(this TimeProvider provider) Parameters provider TimeProvider Returns DateTime WithOffset(DateTime, TimeSpan) Initializes a new instance of the DateTimeOffset structure using the specified DateTime value and offset public static DateTimeOffset WithOffset(this DateTime dateTime, TimeSpan offset) Parameters dateTime DateTime offset TimeSpan Returns DateTimeOffset"
  },
  "api/CSharpPlus.DictionaryExtensions.html": {
    "href": "api/CSharpPlus.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | Brazil Models",
    "keywords": "Class DictionaryExtensions Namespace CSharpPlus Assembly CSharpPlus.dll Dictionary Extensions public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Merge<TKey, TValue>(IEnumerable<IEnumerable<KeyValuePair<TKey, TValue>>>) Return a new dictionary with merged values for each Dictionary in the collection public static IDictionary<TKey, TValue> Merge<TKey, TValue>(this IEnumerable<IEnumerable<KeyValuePair<TKey, TValue>>> @this) where TKey : notnull Parameters this IEnumerable<IEnumerable<KeyValuePair<TKey, TValue>>> Returns IDictionary<TKey, TValue> Type Parameters TKey TValue Merge<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>) Return a new dictionary with the values for this dictionary merged with the other, replacing any duplicated key public static IDictionary<TKey, TValue> Merge<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> @this, IEnumerable<KeyValuePair<TKey, TValue>> other) where TKey : notnull Parameters this IEnumerable<KeyValuePair<TKey, TValue>> other IEnumerable<KeyValuePair<TKey, TValue>> Returns IDictionary<TKey, TValue> Type Parameters TKey TValue ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Create a Dictionary from a KeyValuePair collection public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> @this) where TKey : notnull Parameters this IEnumerable<KeyValuePair<TKey, TValue>> Returns IDictionary<TKey, TValue> Type Parameters TKey TValue"
  },
  "api/CSharpPlus.EnumerablePlus.html": {
    "href": "api/CSharpPlus.EnumerablePlus.html",
    "title": "Class EnumerablePlus | Brazil Models",
    "keywords": "Class EnumerablePlus Namespace CSharpPlus Assembly CSharpPlus.dll Enumerable Plus Extensions public static class EnumerablePlus Inheritance object EnumerablePlus Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ConcatString(IEnumerable<char>) Concatenates the members of a constructed IEnumerable collection of type String. public static string ConcatString(this IEnumerable<char> values) Parameters values IEnumerable<char> Returns string ConcatString(IEnumerable<string>) Concatenates the members of a constructed IEnumerable collection of type String. public static string ConcatString(this IEnumerable<string> values) Parameters values IEnumerable<string> Returns string EmptyIfNull<T>(IEnumerable<T>?) Return empty if collection is null public static IEnumerable<T> EmptyIfNull<T>(this IEnumerable<T>? enumerable) Parameters enumerable IEnumerable<T> Returns IEnumerable<T> Type Parameters T EmptyIfNull<T>(IReadOnlyCollection<T>?) Return empty if array is null public static IReadOnlyCollection<T> EmptyIfNull<T>(this IReadOnlyCollection<T>? array) Parameters array IReadOnlyCollection<T> Returns IReadOnlyCollection<T> Type Parameters T EmptyIfNull<T>(IReadOnlyList<T>?) Return empty if array is null public static IReadOnlyList<T> EmptyIfNull<T>(this IReadOnlyList<T>? array) Parameters array IReadOnlyList<T> Returns IReadOnlyList<T> Type Parameters T EmptyIfNull<T>(T[]?) Return empty if array is null public static T[] EmptyIfNull<T>(this T[]? array) Parameters array T[] Returns T[] Type Parameters T Enumerate<T>(IEnumerable<T>) Enumerate the source to a collection of value tuples (int Index, T Value) public static IEnumerable<(int Index, T Value)> Enumerate<T>(this IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> Returns IEnumerable<(int Index, T Value)> Type Parameters T ExceptBy<T, TKey>(IEnumerable<T>, IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>?) Produces the set difference of two sequences according to a specified key selector function. public static IEnumerable<T> ExceptBy<T, TKey>(this IEnumerable<T> first, IEnumerable<T> second, Func<T, TKey> keySelector, IEqualityComparer<TKey>? comparer = null) Parameters first IEnumerable<T> second IEnumerable<T> keySelector Func<T, TKey> comparer IEqualityComparer<TKey> Returns IEnumerable<T> Type Parameters T TKey ForEach<T>(IEnumerable<T>, Action<T, int>) Eagerly executes the given action on each element in the indexed sequence. public static void ForEach<T>(this IEnumerable<T> source, Action<T, int> action) Parameters source IEnumerable<T> The sequence of elements action Action<T, int> The action to execute on each element; the second parameter of the action represents the index of the source element. Type Parameters T The type of the elements in the sequence ForEach<T>(IEnumerable<T>, Action<T>) Eagerly executes the given action on each element in the sequence. public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters source IEnumerable<T> The sequence of elements action Action<T> The action to execute on each element Type Parameters T The type of the elements in the sequence IntersectBy<T, TKey>(IEnumerable<T>, IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>?) Produces the set intersection of two sequences according to a specified key selector function. public static IEnumerable<T> IntersectBy<T, TKey>(this IEnumerable<T> first, IEnumerable<T> second, Func<T, TKey> keySelector, IEqualityComparer<TKey>? comparer = null) Parameters first IEnumerable<T> second IEnumerable<T> keySelector Func<T, TKey> comparer IEqualityComparer<TKey> Returns IEnumerable<T> Type Parameters T TKey IsEmpty<T>(IEnumerable<T>) determines whether a sequence contains no elements. public static bool IsEmpty<T>(this IEnumerable<T> @this) Parameters this IEnumerable<T> Returns bool Type Parameters T IsEmpty<T>(IEnumerable<T>, Func<T, bool>) Determines whether no element of a sequence satisfies a condition. public static bool IsEmpty<T>(this IEnumerable<T> @this, Func<T, bool> predicate) Parameters this IEnumerable<T> predicate Func<T, bool> Returns bool Type Parameters T JoinWith(IEnumerable<char>) Concatenates the members of a collection, using the specified separator between each member. public static string JoinWith(this IEnumerable<char> values) Parameters values IEnumerable<char> Returns string JoinWith<T>(IEnumerable<T>, char) Concatenates the members of a collection, using the specified separator between each member. public static string JoinWith<T>(this IEnumerable<T> values, char separator) Parameters values IEnumerable<T> separator char Returns string Type Parameters T JoinWith<T>(IEnumerable<T>, string) Concatenates the members of a collection, using the specified separator between each member. public static string JoinWith<T>(this IEnumerable<T> values, string separator) Parameters values IEnumerable<T> separator string Returns string Type Parameters T MaxOrDefault<T>(IEnumerable<T>, T) Returns the maximum value in a generic sequence. Defaults if empty public static T MaxOrDefault<T>(this IEnumerable<T> @this, T value) Parameters this IEnumerable<T> value T Returns T Type Parameters T MaxOrDefault<T, TProp>(IEnumerable<T>, Func<T, TProp>, TProp) Returns the maximum value in a generic sequence. Defaults if empty public static TProp MaxOrDefault<T, TProp>(this IEnumerable<T> @this, Func<T, TProp> keySelector, TProp value) Parameters this IEnumerable<T> keySelector Func<T, TProp> value TProp Returns TProp Type Parameters T TProp MinAndMaxBy<T, TProp>(IEnumerable<T>, Func<T, TProp>) Returns the minimum and maximum value in a generic sequence by key member. public static (T? Min, T? Max) MinAndMaxBy<T, TProp>(this IEnumerable<T> @this, Func<T, TProp> keySelector) Parameters this IEnumerable<T> keySelector Func<T, TProp> Returns (T Min, T Max) Type Parameters T TProp MinAndMax<T>(IEnumerable<T>) Returns the minimum and maximum value in a generic sequence. public static (T? Min, T? Max) MinAndMax<T>(this IEnumerable<T> @this) Parameters this IEnumerable<T> Returns (T Min, T Max) Type Parameters T MinAndMax<T, TProp>(IEnumerable<T>, Func<T, TProp>) Returns the minimum and maximum value in a generic sequence public static (TProp? Min, TProp? Max) MinAndMax<T, TProp>(this IEnumerable<T> @this, Func<T, TProp> keySelector) Parameters this IEnumerable<T> keySelector Func<T, TProp> Returns (TProp Min, TProp Max) Type Parameters T TProp MinOrDefault<T>(IEnumerable<T>, T) Returns the minimum value in a generic sequence. Defaults if empty public static T MinOrDefault<T>(this IEnumerable<T> @this, T value) Parameters this IEnumerable<T> value T Returns T Type Parameters T MinOrDefault<T, TProp>(IEnumerable<T>, Func<T, TProp>, TProp) Returns the minimum value in a generic sequence. Defaults if empty public static TProp MinOrDefault<T, TProp>(this IEnumerable<T> @this, Func<T, TProp> keySelector, TProp value) Parameters this IEnumerable<T> keySelector Func<T, TProp> value TProp Returns TProp Type Parameters T TProp Partition<T>(IEnumerable<T>, Func<T, bool>) Splits an enumerable in two using a predicate. public static (IEnumerable<T> True, IEnumerable<T> False) Partition<T>(this IEnumerable<T> source, Func<T, bool> predicate) Parameters source IEnumerable<T> predicate Func<T, bool> Returns (IEnumerable<T> True, IEnumerable<T> False) A 2-tuple of enumerable elements for true and false predicate Type Parameters T PickRandomOrDefault<T>(IEnumerable<T>, T?, Random?) Returns a random item from collection public static T? PickRandomOrDefault<T>(this IEnumerable<T> source, T? defaultValue = default, Random? random = null) Parameters source IEnumerable<T> The sequence of elements defaultValue T random Random Returns T Type Parameters T PickRandom<T>(IEnumerable<T>, int, Random?) Returns a random subset from collection public static IReadOnlyList<T> PickRandom<T>(this IEnumerable<T> source, int length, Random? random = null) Parameters source IEnumerable<T> length int random Random Returns IReadOnlyList<T> Type Parameters T PickRandom<T>(IEnumerable<T>, Random?) Returns a random item from collection public static T PickRandom<T>(this IEnumerable<T> source, Random? random = null) Parameters source IEnumerable<T> The sequence of elements random Random Returns T Shuffled source Type Parameters T RepeatForever<TSource>(IEnumerable<TSource>, CancellationToken) Repeats the sequence indefinitely or until cancellation is requested public static IEnumerable<TSource> RepeatForever<TSource>(this IEnumerable<TSource> source, CancellationToken cancellationToken = default) Parameters source IEnumerable<TSource> cancellationToken CancellationToken Returns IEnumerable<TSource> Type Parameters TSource Exceptions ArgumentNullException Repeat<TSource>(IEnumerable<TSource>, int) Repeats the sequence indefinitely or a specific number of times. public static IEnumerable<TSource> Repeat<TSource>(this IEnumerable<TSource> source, int times) Parameters source IEnumerable<TSource> times int How many times should repeat the sequence Returns IEnumerable<TSource> Type Parameters TSource Exceptions ArgumentNullException ScanBy<TSource, TKey, TState>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, TState>, Func<TState, TKey, TSource, TState>, IEqualityComparer<TKey>?) Perform scan aggregation by key public static IEnumerable<(TKey, TState)> ScanBy<TSource, TKey, TState>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, TState> stateSelector, Func<TState, TKey, TSource, TState> accumulator, IEqualityComparer<TKey>? comparer = null) where TKey : notnull Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> stateSelector Func<TKey, TState> accumulator Func<TState, TKey, TSource, TState> comparer IEqualityComparer<TKey> Returns IEnumerable<(TKey, TState)> Type Parameters TSource TKey TState Scan<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>) Perform scan aggregation public static IEnumerable<TSource> Scan<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> mapFunction) Parameters source IEnumerable<TSource> mapFunction Func<TSource, TSource, TSource> Returns IEnumerable<TSource> Type Parameters TSource Scan<TSource, TState>(IEnumerable<TSource>, TState, Func<TState, TSource, TState>) Perform scan aggregation public static IEnumerable<TState> Scan<TSource, TState>(this IEnumerable<TSource> source, TState initialState, Func<TState, TSource, TState> mapFunction) Parameters source IEnumerable<TSource> initialState TState mapFunction Func<TState, TSource, TState> Returns IEnumerable<TState> Type Parameters TSource TState SelectMany<T>(IEnumerable<IEnumerable<T>>) Flatten an IEnumerable of sequence and flattens into one sequence. public static IEnumerable<T> SelectMany<T>(this IEnumerable<IEnumerable<T>> @this) Parameters this IEnumerable<IEnumerable<T>> Returns IEnumerable<T> Type Parameters T Shuffle<T>(IEnumerable<T>, Random?) Shuffle an source based on a random object public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source, Random? random = null) Parameters source IEnumerable<T> The sequence of elements random Random Returns IEnumerable<T> Shuffled source Type Parameters T SkipUntil<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Skip until item satisfies the predicate (inclusive) public static IEnumerable<TSource> SkipUntil<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> predicate Func<TSource, bool> Returns IEnumerable<TSource> Type Parameters TSource Exceptions ArgumentNullException TakeUntil<TSource>(IEnumerable<TSource>, Func<TSource, bool>) Take until item satisfies the predicate (inclusive) public static IEnumerable<TSource> TakeUntil<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate) Parameters source IEnumerable<TSource> predicate Func<TSource, bool> Returns IEnumerable<TSource> Type Parameters TSource Exceptions ArgumentNullException Tap<T>(IEnumerable<T>, Action<T>) Lazily run action when the enumerable is evaluated public static IEnumerable<T> Tap<T>(this IEnumerable<T> @this, Action<T> action) Parameters this IEnumerable<T> action Action<T> Returns IEnumerable<T> Type Parameters T ToEnumerable(IEnumerator) Creates an IEnumerable from an IEnumerator public static IEnumerable<object?> ToEnumerable(this IEnumerator enumerator) Parameters enumerator IEnumerator Returns IEnumerable<object> ToEnumerable<T>(IEnumerator<T>) Creates an IEnumerable from an IEnumerator public static IEnumerable<T> ToEnumerable<T>(this IEnumerator<T> enumerator) Parameters enumerator IEnumerator<T> Returns IEnumerable<T> Type Parameters T ToNullable<T>(IEnumerable<T>) Casts Enumerable to nullable value type public static IEnumerable<T?> ToNullable<T>(this IEnumerable<T> @this) where T : struct Parameters this IEnumerable<T> Returns IEnumerable<T?> Type Parameters T ToReadOnlyList<T>(IEnumerable<T>) Creates a IReadOnlyList from a IEnumerable. public static IReadOnlyList<T> ToReadOnlyList<T>(this IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> Returns IReadOnlyList<T> Type Parameters T ToReadOnly<T>(IEnumerable<T>) Creates a IReadOnlyCollection from a IEnumerable. public static IReadOnlyCollection<T> ToReadOnly<T>(this IEnumerable<T> enumerable) Parameters enumerable IEnumerable<T> Returns IReadOnlyCollection<T> Type Parameters T ToSingleton<T>(T) Return value as singleton source public static IEnumerable<T> ToSingleton<T>(this T item) Parameters item T Returns IEnumerable<T> An source of a single item Type Parameters T WhenAll(IEnumerable<Task>) Creates a task that will complete when all the Task objects in an enumerable collection have completed. public static Task WhenAll(this IEnumerable<Task> tasks) Parameters tasks IEnumerable<Task> Returns Task A task that represents the completion of all the supplied tasks. WhenAll<T>(IEnumerable<Task<T>>) Creates a task that will complete when all the Task[TResult] objects in an enumerable collection have completed. public static Task<IEnumerable<T>> WhenAll<T>(this IEnumerable<Task<T>> tasks) Parameters tasks IEnumerable<Task<T>> Returns Task<IEnumerable<T>> Type Parameters T WhenAll<TKey, TValue>(IDictionary<TKey, Task<TValue>>) Return a task waiting for each key on the dictionary public static Task<IDictionary<TKey, TValue>> WhenAll<TKey, TValue>(this IDictionary<TKey, Task<TValue>> @this) where TKey : notnull Parameters this IDictionary<TKey, Task<TValue>> Returns Task<IDictionary<TKey, TValue>> Type Parameters TKey TValue WhenAny(IEnumerable<Task>) Creates a task that will complete when any of the supplied tasks have completed. public static Task WhenAny(this IEnumerable<Task> tasks) Parameters tasks IEnumerable<Task> Returns Task A task that represents the completion of one of the supplied tasks. The return task's Result is the task that completed. WhenAny<T>(IEnumerable<Task<T>>) Creates a task that will complete when any of the supplied tasks have completed. public static Task<T> WhenAny<T>(this IEnumerable<Task<T>> tasks) Parameters tasks IEnumerable<Task<T>> The tasks to wait on for completion Returns Task<T> A task that represents the completion of one of the supplied tasks. The return task's Result is the task that completed. Type Parameters T WhereNotNull<T>(IEnumerable<T?>) Filter non-null items public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> enumerable) where T : struct Parameters enumerable IEnumerable<T?> Returns IEnumerable<T> Type Parameters T WhereNotNull<T>(IEnumerable<T?>) Filter non-null items public static IEnumerable<T> WhereNotNull<T>(this IEnumerable<T?> enumerable) where T : class Parameters enumerable IEnumerable<T> Returns IEnumerable<T> Type Parameters T"
  },
  "api/CSharpPlus.ExpressionExtensions.html": {
    "href": "api/CSharpPlus.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | Brazil Models",
    "keywords": "Class ExpressionExtensions Namespace CSharpPlus Assembly CSharpPlus.dll Expression Extensions public static class ExpressionExtensions Inheritance object ExpressionExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetMemberNameOrDefault<T>(Expression<T>, string?) Get the member name of an expression if it is valid otherwise return default public static string? GetMemberNameOrDefault<T>(this Expression<T> expression, string? defaultValue = null) Parameters expression Expression<T> defaultValue string Returns string Type Parameters T Exceptions NotImplementedException GetMemberName<T>(Expression<T>) Get the member name of an expression public static string GetMemberName<T>(this Expression<T> expression) Parameters expression Expression<T> Returns string Type Parameters T Exceptions InvalidOperationException GetMemberOrDefault<T>(Expression<T>, MemberInfo?) Get the member info of an expression if it is valid otherwise return default public static MemberInfo? GetMemberOrDefault<T>(this Expression<T> expression, MemberInfo? defaultValue = null) Parameters expression Expression<T> defaultValue MemberInfo Returns MemberInfo Type Parameters T Exceptions NotImplementedException"
  },
  "api/CSharpPlus.JsonConverters.JsonBigIntegerConverter.html": {
    "href": "api/CSharpPlus.JsonConverters.JsonBigIntegerConverter.html",
    "title": "Class JsonBigIntegerConverter | Brazil Models",
    "keywords": "Class JsonBigIntegerConverter Namespace CSharpPlus.JsonConverters Assembly CSharpPlus.dll Json converter for System.Numerics.BigInteger public class JsonBigIntegerConverter : JsonConverter<BigInteger> Inheritance object JsonConverter JsonConverter<BigInteger> JsonBigIntegerConverter Inherited Members JsonConverter<BigInteger>.CanConvert(Type) JsonConverter<BigInteger>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<BigInteger>.WriteAsPropertyName(Utf8JsonWriter, BigInteger, JsonSerializerOptions) JsonConverter<BigInteger>.HandleNull JsonConverter<BigInteger>.Type object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods EnumerablePlus.ToSingleton<T>(T) Constructors JsonBigIntegerConverter() public JsonBigIntegerConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override BigInteger Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns BigInteger Write(Utf8JsonWriter, BigInteger, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, BigInteger value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value BigInteger options JsonSerializerOptions"
  },
  "api/CSharpPlus.JsonConverters.JsonIPAddressConverter.html": {
    "href": "api/CSharpPlus.JsonConverters.JsonIPAddressConverter.html",
    "title": "Class JsonIPAddressConverter | Brazil Models",
    "keywords": "Class JsonIPAddressConverter Namespace CSharpPlus.JsonConverters Assembly CSharpPlus.dll Json converter for IPAddress public sealed class JsonIPAddressConverter : JsonConverter<IPAddress> Inheritance object JsonConverter JsonConverter<IPAddress> JsonIPAddressConverter Inherited Members JsonConverter<IPAddress>.CanConvert(Type) JsonConverter<IPAddress>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<IPAddress>.WriteAsPropertyName(Utf8JsonWriter, IPAddress, JsonSerializerOptions) JsonConverter<IPAddress>.HandleNull JsonConverter<IPAddress>.Type object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods EnumerablePlus.ToSingleton<T>(T) Constructors JsonIPAddressConverter() public JsonIPAddressConverter() Fields MaxIPv4StringLength public const int MaxIPv4StringLength = 15 Field Value int MaxIPv6StringLength public const int MaxIPv6StringLength = 65 Field Value int Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override IPAddress Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns IPAddress Write(Utf8JsonWriter, IPAddress, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, IPAddress value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value IPAddress options JsonSerializerOptions"
  },
  "api/CSharpPlus.JsonConverters.JsonIPEndPointConverter.html": {
    "href": "api/CSharpPlus.JsonConverters.JsonIPEndPointConverter.html",
    "title": "Class JsonIPEndPointConverter | Brazil Models",
    "keywords": "Class JsonIPEndPointConverter Namespace CSharpPlus.JsonConverters Assembly CSharpPlus.dll Json converter for IPEndpoint public sealed class JsonIPEndPointConverter : JsonConverter<IPEndPoint> Inheritance object JsonConverter JsonConverter<IPEndPoint> JsonIPEndPointConverter Inherited Members JsonConverter<IPEndPoint>.CanConvert(Type) JsonConverter<IPEndPoint>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<IPEndPoint>.WriteAsPropertyName(Utf8JsonWriter, IPEndPoint, JsonSerializerOptions) JsonConverter<IPEndPoint>.HandleNull JsonConverter<IPEndPoint>.Type object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods EnumerablePlus.ToSingleton<T>(T) Constructors JsonIPEndPointConverter() public JsonIPEndPointConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override IPEndPoint Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns IPEndPoint Write(Utf8JsonWriter, IPEndPoint, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, IPEndPoint value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value IPEndPoint options JsonSerializerOptions"
  },
  "api/CSharpPlus.JsonConverters.html": {
    "href": "api/CSharpPlus.JsonConverters.html",
    "title": "Namespace CSharpPlus.JsonConverters | Brazil Models",
    "keywords": "Namespace CSharpPlus.JsonConverters Classes JsonBigIntegerConverter Json converter for System.Numerics.BigInteger JsonIPAddressConverter Json converter for IPAddress JsonIPEndPointConverter Json converter for IPEndpoint"
  },
  "api/CSharpPlus.LambdaComparer.html": {
    "href": "api/CSharpPlus.LambdaComparer.html",
    "title": "Class LambdaComparer | Brazil Models",
    "keywords": "Class LambdaComparer Namespace CSharpPlus Assembly CSharpPlus.dll public static class LambdaComparer Inheritance object LambdaComparer Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Create<TValue>(Func<TValue, TValue, CompareResult>) public static IComparer<TValue> Create<TValue>(Func<TValue, TValue, CompareResult> comparerFunc) Parameters comparerFunc Func<TValue, TValue, CompareResult> Returns IComparer<TValue> Type Parameters TValue Create<TSource, TKey>(Func<TSource, TKey>, Comparer<TKey>?) public static IComparer<TSource> Create<TSource, TKey>(Func<TSource, TKey> key, Comparer<TKey>? keyComparer = null) where TKey : IComparable<TKey> Parameters key Func<TSource, TKey> keyComparer Comparer<TKey> Returns IComparer<TSource> Type Parameters TSource TKey"
  },
  "api/CSharpPlus.LambdaComparison.html": {
    "href": "api/CSharpPlus.LambdaComparison.html",
    "title": "Class LambdaComparison | Brazil Models",
    "keywords": "Class LambdaComparison Namespace CSharpPlus Assembly CSharpPlus.dll public static class LambdaComparison Inheritance object LambdaComparison Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Create<TValue>(Func<TValue, TValue, CompareResult>) public static Comparison<TValue> Create<TValue>(Func<TValue, TValue, CompareResult> compareFunc) Parameters compareFunc Func<TValue, TValue, CompareResult> Returns Comparison<TValue> Type Parameters TValue Create<TSource, TKey>(Func<TSource, TKey>, Comparer<TKey>?) public static Comparison<TSource> Create<TSource, TKey>(Func<TSource, TKey> key, Comparer<TKey>? keyComparer = null) where TKey : IComparable<TKey> Parameters key Func<TSource, TKey> keyComparer Comparer<TKey> Returns Comparison<TSource> Type Parameters TSource TKey"
  },
  "api/CSharpPlus.NumberExtensions.html": {
    "href": "api/CSharpPlus.NumberExtensions.html",
    "title": "Class NumberExtensions | Brazil Models",
    "keywords": "Class NumberExtensions Namespace CSharpPlus Assembly CSharpPlus.dll Extensions for numerics public static class NumberExtensions Inheritance object NumberExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods ClampZero<T>(T) Returns value clamped to min 0 public static T ClampZero<T>(this T value) where T : INumber<T>, IMinMaxValue<T> Parameters value T Returns T Type Parameters T Clamp<T>(T, T, T) Returns value clamped to the inclusive range of min and max. public static T Clamp<T>(this T value, T min, T max) where T : INumber<T> Parameters value T min T max T Returns T Type Parameters T Round<T>(T) Rounds a value to the nearest integer. public static T Round<T>(this T d) where T : IFloatingPoint<T> Parameters d T Returns T Type Parameters T Round<T>(T, int) Rounds a Decimal value to a specified number of decimal places. public static T Round<T>(this T d, int digits) where T : IFloatingPoint<T> Parameters d T digits int Returns T Type Parameters T Round<T>(T, int, MidpointRounding) Rounds a decimal value to the specified precision using the specified rounding strategy. public static T Round<T>(this T d, int digits, MidpointRounding mode) where T : IFloatingPoint<T> Parameters d T digits int mode MidpointRounding Returns T Type Parameters T Round<T>(T, MidpointRounding) Rounds a decimal value to an integer using the specified rounding strategy. public static T Round<T>(this T d, MidpointRounding mode) where T : IFloatingPoint<T> Parameters d T mode MidpointRounding Returns T Type Parameters T"
  },
  "api/CSharpPlus.Operator.html": {
    "href": "api/CSharpPlus.Operator.html",
    "title": "Class Operator | Brazil Models",
    "keywords": "Class Operator Namespace CSharpPlus Assembly CSharpPlus.dll public static class Operator Inheritance object Operator Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Decrement<T>(T) public static T Decrement<T>(T value) where T : IDecrementOperators<T> Parameters value T Returns T Type Parameters T DivideBy<T>(T) public static Func<T, T> DivideBy<T>(T value) where T : IDivisionOperators<T, T, T> Parameters value T Returns Func<T, T> Type Parameters T DivideFrom<T>(T) public static Func<T, T> DivideFrom<T>(T value) where T : IDivisionOperators<T, T, T> Parameters value T Returns Func<T, T> Type Parameters T Divide<T>(T, T) public static T Divide<T>(T a, T b) where T : IDivisionOperators<T, T, T> Parameters a T b T Returns T Type Parameters T Equals<T>(T) public static Func<T, bool> Equals<T>(T value) where T : IEqualityOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T Equals<T>(T, T) public static bool Equals<T>(T a, T b) where T : IEqualityOperators<T, T, bool> Parameters a T b T Returns bool Type Parameters T Equatable<T>(T) public static Func<T, bool> Equatable<T>(T value) where T : IEqualityOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T Equatable<T>(T, T) public static bool Equatable<T>(T a, T b) where T : IEquatable<T> Parameters a T b T Returns bool Type Parameters T GreaterThanOrEquals<T>(T) public static Func<T, bool> GreaterThanOrEquals<T>(T value) where T : IComparisonOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T GreaterThanOrEquals<T>(T, T) public static bool GreaterThanOrEquals<T>(T a, T b) where T : IComparisonOperators<T, T, bool> Parameters a T b T Returns bool Type Parameters T GreaterThan<T>(T) public static Func<T, bool> GreaterThan<T>(T value) where T : IComparisonOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T GreaterThan<T>(T, T) public static bool GreaterThan<T>(T a, T b) where T : IComparisonOperators<T, T, bool> Parameters a T b T Returns bool Type Parameters T Identity<T>(T) public static T Identity<T>(T v) Parameters v T Returns T Type Parameters T Increment<T>(T) public static T Increment<T>(T value) where T : IIncrementOperators<T> Parameters value T Returns T Type Parameters T LessThanOrEquals<T>(T) public static Func<T, bool> LessThanOrEquals<T>(T value) where T : IComparisonOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T LessThanOrEquals<T>(T, T) public static bool LessThanOrEquals<T>(T a, T b) where T : IComparisonOperators<T, T, bool> Parameters a T b T Returns bool Type Parameters T LessThan<T>(T) public static Func<T, bool> LessThan<T>(T value) where T : IComparisonOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T LessThan<T>(T, T) public static bool LessThan<T>(T a, T b) where T : IComparisonOperators<T, T, bool> Parameters a T b T Returns bool Type Parameters T Multiply<T>(T) public static Func<T, T> Multiply<T>(T value) where T : IMultiplyOperators<T, T, T> Parameters value T Returns Func<T, T> Type Parameters T Multiply<T>(T, T) public static T Multiply<T>(T a, T b) where T : IMultiplyOperators<T, T, T> Parameters a T b T Returns T Type Parameters T NotEquals<T>(T) public static Func<T, bool> NotEquals<T>(T value) where T : IEqualityOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T NotEquals<T>(T, T) public static bool NotEquals<T>(T a, T b) where T : IEqualityOperators<T, T, bool> Parameters a T b T Returns bool Type Parameters T NotEquatable<T>(T) public static Func<T, bool> NotEquatable<T>(T value) where T : IEqualityOperators<T, T, bool> Parameters value T Returns Func<T, bool> Type Parameters T NotEquatable<T>(T, T) public static bool NotEquatable<T>(T a, T b) where T : IEquatable<T> Parameters a T b T Returns bool Type Parameters T SubtractBy<T>(T) public static Func<T, T> SubtractBy<T>(T value) where T : ISubtractionOperators<T, T, T> Parameters value T Returns Func<T, T> Type Parameters T SubtractFrom<T>(T) public static Func<T, T> SubtractFrom<T>(T value) where T : ISubtractionOperators<T, T, T> Parameters value T Returns Func<T, T> Type Parameters T Subtract<T>(T, T) public static T Subtract<T>(T a, T b) where T : ISubtractionOperators<T, T, T> Parameters a T b T Returns T Type Parameters T Sum<T>(T) public static Func<T, T> Sum<T>(T value) where T : IAdditionOperators<T, T, T> Parameters value T Returns Func<T, T> Type Parameters T Sum<T>(T, T) public static T Sum<T>(T a, T b) where T : IAdditionOperators<T, T, T> Parameters a T b T Returns T Type Parameters T"
  },
  "api/CSharpPlus.RangeExtension.RangeEnumerator.html": {
    "href": "api/CSharpPlus.RangeExtension.RangeEnumerator.html",
    "title": "Struct RangeExtension.RangeEnumerator | Brazil Models",
    "keywords": "Struct RangeExtension.RangeEnumerator Namespace CSharpPlus Assembly CSharpPlus.dll public struct RangeExtension.RangeEnumerator : IEnumerator<int>, IEnumerator, IDisposable Implements IEnumerator<int> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods EnumerablePlus.ToSingleton<T>(T) EnumerablePlus.ToEnumerable<T>(IEnumerator<T>) EnumerablePlus.ToEnumerable(IEnumerator) Constructors RangeEnumerator(Range) public RangeEnumerator(Range range) Parameters range Range Properties Current public readonly int Current { get; } Property Value int Methods Dispose() public readonly void Dispose() MoveNext() public bool MoveNext() Returns bool Reset() public void Reset()"
  },
  "api/CSharpPlus.RangeExtension.html": {
    "href": "api/CSharpPlus.RangeExtension.html",
    "title": "Class RangeExtension | Brazil Models",
    "keywords": "Class RangeExtension Namespace CSharpPlus Assembly CSharpPlus.dll Range extensions public static class RangeExtension Inheritance object RangeExtension Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Enumerate(Range) Enumerable Range public static IEnumerable<int> Enumerate(this Range range) Parameters range Range Returns IEnumerable<int> GetEnumerator(Range) Enumerate Range operators ^ sets the value as exclusive public static RangeExtension.RangeEnumerator GetEnumerator(this Range range) Parameters range Range Returns RangeExtension.RangeEnumerator SelectMany(Range, Func<int, Range>) Range Bind Projection public static IEnumerable<int> SelectMany(this Range range, Func<int, Range> projection) Parameters range Range projection Func<int, Range> Returns IEnumerable<int> SelectMany<TResult>(Range, Func<int, IEnumerable<TResult>>) Int Bind Projection public static IEnumerable<TResult> SelectMany<TResult>(this Range range, Func<int, IEnumerable<TResult>> projection) Parameters range Range projection Func<int, IEnumerable<TResult>> Returns IEnumerable<TResult> Type Parameters TResult SelectMany<TResult>(Range, Func<int, Range>, Func<int, int, TResult>) Range Bind Projection public static IEnumerable<TResult> SelectMany<TResult>(this Range range, Func<int, Range> projection, Func<int, int, TResult> project) Parameters range Range projection Func<int, Range> project Func<int, int, TResult> Returns IEnumerable<TResult> Type Parameters TResult SelectMany<TMap, TResult>(Range, Func<int, IEnumerable<TMap>>, Func<int, TMap, TResult>) Int Bind Projection public static IEnumerable<TResult> SelectMany<TMap, TResult>(this Range range, Func<int, IEnumerable<TMap>> projection, Func<int, TMap, TResult> project) Parameters range Range projection Func<int, IEnumerable<TMap>> project Func<int, TMap, TResult> Returns IEnumerable<TResult> Type Parameters TMap TResult Select<TMap>(Range, Func<int, TMap>) Map Enumerate int public static IEnumerable<TMap> Select<TMap>(this Range range, Func<int, TMap> map) Parameters range Range map Func<int, TMap> Returns IEnumerable<TMap> Type Parameters TMap"
  },
  "api/CSharpPlus.StringExtensions.html": {
    "href": "api/CSharpPlus.StringExtensions.html",
    "title": "Class StringExtensions | Brazil Models",
    "keywords": "Class StringExtensions Namespace CSharpPlus Assembly CSharpPlus.dll String extensions public static class StringExtensions Inheritance object StringExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods GetStableHashCode(string) Returns a persistent hashcode for the string public static int GetStableHashCode(this string str) Parameters str string Returns int IsNullOrEmpty(string?) Indicates whether the specified string is null or an empty string (\"\"). public static bool IsNullOrEmpty(this string? value) Parameters value string The string to test Returns bool true if the value parameter is null or an empty string (\"\"); otherwise, false. IsNullOrWhiteSpace(string?) Indicates whether a specified string is null, empty, or consists only of white-space characters. public static bool IsNullOrWhiteSpace(this string? value) Parameters value string The string to test. Returns bool true if the value parameter is null or Empty, or if value consists exclusively of white-space characters."
  },
  "api/CSharpPlus.ValueTaskPlus.html": {
    "href": "api/CSharpPlus.ValueTaskPlus.html",
    "title": "Class ValueTaskPlus | Brazil Models",
    "keywords": "Class ValueTaskPlus Namespace CSharpPlus Assembly CSharpPlus.dll ValueTask Extensions public static class ValueTaskPlus Inheritance object ValueTaskPlus Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>, ValueTask<T10>) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4, ValueTask<T5> item5, ValueTask<T6> item6, ValueTask<T7> item7, ValueTask<T8> item8, ValueTask<T9> item9, ValueTask<T10> item10) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> item5 ValueTask<T5> item6 ValueTask<T6> item7 ValueTask<T7> item8 ValueTask<T8> item9 ValueTask<T9> item10 ValueTask<T10> Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>, ValueTask<T10>)) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>, ValueTask<T10>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>, ValueTask<T10>) Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 T10 WhenEach<T1, T2>(ValueTask<T1>, ValueTask<T2>) public static ValueTask<(T1, T2)> WhenEach<T1, T2>(ValueTask<T1> item1, ValueTask<T2> item2) Parameters item1 ValueTask<T1> item2 ValueTask<T2> Returns ValueTask<(T1, T2)> Type Parameters T1 T2 WhenEach<T1, T2>(in (ValueTask<T1>, ValueTask<T2>)) public static ValueTask<(T1, T2)> WhenEach<T1, T2>(in (ValueTask<T1>, ValueTask<T2>) values) Parameters values (ValueTask<T1>, ValueTask<T2>) Returns ValueTask<(T1, T2)> Type Parameters T1 T2 WhenEach<T1, T2, T3>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>) public static ValueTask<(T1, T2, T3)> WhenEach<T1, T2, T3>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> Returns ValueTask<(T1, T2, T3)> Type Parameters T1 T2 T3 WhenEach<T1, T2, T3>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>)) public static ValueTask<(T1, T2, T3)> WhenEach<T1, T2, T3>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>) Returns ValueTask<(T1, T2, T3)> Type Parameters T1 T2 T3 WhenEach<T1, T2, T3, T4>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>) public static ValueTask<(T1, T2, T3, T4)> WhenEach<T1, T2, T3, T4>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> Returns ValueTask<(T1, T2, T3, T4)> Type Parameters T1 T2 T3 T4 WhenEach<T1, T2, T3, T4>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>)) public static ValueTask<(T1, T2, T3, T4)> WhenEach<T1, T2, T3, T4>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>) Returns ValueTask<(T1, T2, T3, T4)> Type Parameters T1 T2 T3 T4 WhenEach<T1, T2, T3, T4, T5>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>) public static ValueTask<(T1, T2, T3, T4, T5)> WhenEach<T1, T2, T3, T4, T5>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4, ValueTask<T5> item5) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> item5 ValueTask<T5> Returns ValueTask<(T1, T2, T3, T4, T5)> Type Parameters T1 T2 T3 T4 T5 WhenEach<T1, T2, T3, T4, T5>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>)) public static ValueTask<(T1, T2, T3, T4, T5)> WhenEach<T1, T2, T3, T4, T5>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>) Returns ValueTask<(T1, T2, T3, T4, T5)> Type Parameters T1 T2 T3 T4 T5 WhenEach<T1, T2, T3, T4, T5, T6>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>) public static ValueTask<(T1, T2, T3, T4, T5, T6)> WhenEach<T1, T2, T3, T4, T5, T6>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4, ValueTask<T5> item5, ValueTask<T6> item6) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> item5 ValueTask<T5> item6 ValueTask<T6> Returns ValueTask<(T1, T2, T3, T4, T5, T6)> Type Parameters T1 T2 T3 T4 T5 T6 WhenEach<T1, T2, T3, T4, T5, T6>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>)) public static ValueTask<(T1, T2, T3, T4, T5, T6)> WhenEach<T1, T2, T3, T4, T5, T6>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>) Returns ValueTask<(T1, T2, T3, T4, T5, T6)> Type Parameters T1 T2 T3 T4 T5 T6 WhenEach<T1, T2, T3, T4, T5, T6, T7>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7)> WhenEach<T1, T2, T3, T4, T5, T6, T7>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4, ValueTask<T5> item5, ValueTask<T6> item6, ValueTask<T7> item7) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> item5 ValueTask<T5> item6 ValueTask<T6> item7 ValueTask<T7> Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7)> Type Parameters T1 T2 T3 T4 T5 T6 T7 WhenEach<T1, T2, T3, T4, T5, T6, T7>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>)) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7)> WhenEach<T1, T2, T3, T4, T5, T6, T7>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>) Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7)> Type Parameters T1 T2 T3 T4 T5 T6 T7 WhenEach<T1, T2, T3, T4, T5, T6, T7, T8>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8)> WhenEach<T1, T2, T3, T4, T5, T6, T7, T8>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4, ValueTask<T5> item5, ValueTask<T6> item6, ValueTask<T7> item7, ValueTask<T8> item8) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> item5 ValueTask<T5> item6 ValueTask<T6> item7 ValueTask<T7> item8 ValueTask<T8> Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8)> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 WhenEach<T1, T2, T3, T4, T5, T6, T7, T8>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>)) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8)> WhenEach<T1, T2, T3, T4, T5, T6, T7, T8>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>) Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8)> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9>(ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9>(ValueTask<T1> item1, ValueTask<T2> item2, ValueTask<T3> item3, ValueTask<T4> item4, ValueTask<T5> item5, ValueTask<T6> item6, ValueTask<T7> item7, ValueTask<T8> item8, ValueTask<T9> item9) Parameters item1 ValueTask<T1> item2 ValueTask<T2> item3 ValueTask<T3> item4 ValueTask<T4> item5 ValueTask<T5> item6 ValueTask<T6> item7 ValueTask<T7> item8 ValueTask<T8> item9 ValueTask<T9> Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>)) public static ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> WhenEach<T1, T2, T3, T4, T5, T6, T7, T8, T9>(in (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>) values) Parameters values (ValueTask<T1>, ValueTask<T2>, ValueTask<T3>, ValueTask<T4>, ValueTask<T5>, ValueTask<T6>, ValueTask<T7>, ValueTask<T8>, ValueTask<T9>) Returns ValueTask<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9"
  },
  "api/CSharpPlus.html": {
    "href": "api/CSharpPlus.html",
    "title": "Namespace CSharpPlus | Brazil Models",
    "keywords": "Namespace CSharpPlus Classes ArrayExtensions Enumerable Plus Extensions AssemblyExtensions Assembly Extensions CollectionExtensions Collection extensions DateTimeExtensions DateTime Extensions DictionaryExtensions Dictionary Extensions EnumerablePlus Enumerable Plus Extensions ExpressionExtensions Expression Extensions LambdaComparer LambdaComparison NumberExtensions Extensions for numerics Operator RangeExtension Range extensions StringExtensions String extensions ValueTaskPlus ValueTask Extensions Structs RangeExtension.RangeEnumerator Enums CompareResult"
  },
  "api/System.Text.Json.Serialization.DateTimeForceUtcJsonConverter.html": {
    "href": "api/System.Text.Json.Serialization.DateTimeForceUtcJsonConverter.html",
    "title": "Class DateTimeForceUtcJsonConverter | Brazil Models",
    "keywords": "Class DateTimeForceUtcJsonConverter Namespace System.Text.Json.Serialization Assembly CSharpPlus.dll Json converter for DateTime forcing UTC public class DateTimeForceUtcJsonConverter : JsonConverter<DateTime> Inheritance object JsonConverter JsonConverter<DateTime> DateTimeForceUtcJsonConverter Inherited Members JsonConverter<DateTime>.CanConvert(Type) JsonConverter<DateTime>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<DateTime>.WriteAsPropertyName(Utf8JsonWriter, DateTime, JsonSerializerOptions) JsonConverter<DateTime>.HandleNull JsonConverter<DateTime>.Type object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Extension Methods EnumerablePlus.ToSingleton<T>(T) Constructors DateTimeForceUtcJsonConverter(TimeSpan) Convert DateTime always in UTC Kind public DateTimeForceUtcJsonConverter(TimeSpan offset) Parameters offset TimeSpan Custom timespan offset for DateTimeKind.Unspecified DateTimeForceUtcJsonConverter(TimeZoneInfo?) Convert DateTime always in UTC Kind public DateTimeForceUtcJsonConverter(TimeZoneInfo? timeZone = null) Parameters timeZone TimeZoneInfo time zone to use when DateTimeKind.Unspecified Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters reader Utf8JsonReader typeToConvert Type options JsonSerializerOptions Returns DateTime Write(Utf8JsonWriter, DateTime, JsonSerializerOptions) public override void Write(Utf8JsonWriter writer, DateTime value, JsonSerializerOptions options) Parameters writer Utf8JsonWriter value DateTime options JsonSerializerOptions"
  },
  "api/System.Text.Json.Serialization.html": {
    "href": "api/System.Text.Json.Serialization.html",
    "title": "Namespace System.Text.Json.Serialization | Brazil Models",
    "keywords": "Namespace System.Text.Json.Serialization Classes DateTimeForceUtcJsonConverter Json converter for DateTime forcing UTC"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Brazil Models",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "CSharpPlus | Brazil Models",
    "keywords": "CSharpPlus"
  }
}