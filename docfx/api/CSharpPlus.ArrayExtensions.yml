### YamlMime:ManagedReference
items:
- uid: CSharpPlus.ArrayExtensions
  commentId: T:CSharpPlus.ArrayExtensions
  id: ArrayExtensions
  parent: CSharpPlus
  children:
  - CSharpPlus.ArrayExtensions.ConcatArray``1(``0[],``0[])
  - CSharpPlus.ArrayExtensions.ConvertAll``2(``0[],System.Func{``0,``1})
  - CSharpPlus.ArrayExtensions.Exist``1(``0[],System.Func{``0,System.Boolean})
  - CSharpPlus.ArrayExtensions.FindAll``1(``0[],System.Func{``0,System.Boolean})
  - CSharpPlus.ArrayExtensions.FindIndex``1(``0[],System.Func{``0,System.Boolean})
  - CSharpPlus.ArrayExtensions.FindLastIndex``1(``0[],System.Func{``0,System.Boolean})
  - CSharpPlus.ArrayExtensions.FindLast``1(``0[],System.Func{``0,System.Boolean})
  - CSharpPlus.ArrayExtensions.Find``1(``0[],System.Func{``0,System.Boolean})
  - CSharpPlus.ArrayExtensions.SortBy``2(``0[],System.Func{``0,``1})
  - CSharpPlus.ArrayExtensions.Sort``1(``0[])
  langs:
  - csharp
  - vb
  name: ArrayExtensions
  nameWithType: ArrayExtensions
  fullName: CSharpPlus.ArrayExtensions
  type: Class
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Enumerable Plus Extensions
  example: []
  syntax:
    content: public static class ArrayExtensions
    content.vb: Public Module ArrayExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
- uid: CSharpPlus.ArrayExtensions.FindAll``1(``0[],System.Func{``0,System.Boolean})
  commentId: M:CSharpPlus.ArrayExtensions.FindAll``1(``0[],System.Func{``0,System.Boolean})
  id: FindAll``1(``0[],System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindAll<TSource>(TSource[], Func<TSource, bool>)
  nameWithType: ArrayExtensions.FindAll<TSource>(TSource[], Func<TSource, bool>)
  fullName: CSharpPlus.ArrayExtensions.FindAll<TSource>(TSource[], System.Func<TSource, bool>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Filters an array of values based on a predicate.
  example: []
  syntax:
    content: public static TSource[] FindAll<TSource>(this TSource[] @this, Func<TSource, bool> predicate)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}[]'
    content.vb: Public Shared Function FindAll(Of TSource)(this As TSource(), predicate As Func(Of TSource, Boolean)) As TSource()
  overload: CSharpPlus.ArrayExtensions.FindAll*
  nameWithType.vb: ArrayExtensions.FindAll(Of TSource)(TSource(), Func(Of TSource, Boolean))
  fullName.vb: CSharpPlus.ArrayExtensions.FindAll(Of TSource)(TSource(), System.Func(Of TSource, Boolean))
  name.vb: FindAll(Of TSource)(TSource(), Func(Of TSource, Boolean))
- uid: CSharpPlus.ArrayExtensions.Exist``1(``0[],System.Func{``0,System.Boolean})
  commentId: M:CSharpPlus.ArrayExtensions.Exist``1(``0[],System.Func{``0,System.Boolean})
  id: Exist``1(``0[],System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Exist<TSource>(TSource[], Func<TSource, bool>)
  nameWithType: ArrayExtensions.Exist<TSource>(TSource[], Func<TSource, bool>)
  fullName: CSharpPlus.ArrayExtensions.Exist<TSource>(TSource[], System.Func<TSource, bool>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
  example: []
  syntax:
    content: public static bool Exist<TSource>(this TSource[] @this, Func<TSource, bool> predicate)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Boolean
    content.vb: Public Shared Function Exist(Of TSource)(this As TSource(), predicate As Func(Of TSource, Boolean)) As Boolean
  overload: CSharpPlus.ArrayExtensions.Exist*
  nameWithType.vb: ArrayExtensions.Exist(Of TSource)(TSource(), Func(Of TSource, Boolean))
  fullName.vb: CSharpPlus.ArrayExtensions.Exist(Of TSource)(TSource(), System.Func(Of TSource, Boolean))
  name.vb: Exist(Of TSource)(TSource(), Func(Of TSource, Boolean))
- uid: CSharpPlus.ArrayExtensions.Find``1(``0[],System.Func{``0,System.Boolean})
  commentId: M:CSharpPlus.ArrayExtensions.Find``1(``0[],System.Func{``0,System.Boolean})
  id: Find``1(``0[],System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Find<TSource>(TSource[], Func<TSource, bool>)
  nameWithType: ArrayExtensions.Find<TSource>(TSource[], Func<TSource, bool>)
  fullName: CSharpPlus.ArrayExtensions.Find<TSource>(TSource[], System.Func<TSource, bool>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Array.
  example: []
  syntax:
    content: public static TSource? Find<TSource>(this TSource[] @this, Func<TSource, bool> predicate)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
    content.vb: Public Shared Function Find(Of TSource)(this As TSource(), predicate As Func(Of TSource, Boolean)) As TSource
  overload: CSharpPlus.ArrayExtensions.Find*
  nameWithType.vb: ArrayExtensions.Find(Of TSource)(TSource(), Func(Of TSource, Boolean))
  fullName.vb: CSharpPlus.ArrayExtensions.Find(Of TSource)(TSource(), System.Func(Of TSource, Boolean))
  name.vb: Find(Of TSource)(TSource(), Func(Of TSource, Boolean))
- uid: CSharpPlus.ArrayExtensions.FindLast``1(``0[],System.Func{``0,System.Boolean})
  commentId: M:CSharpPlus.ArrayExtensions.FindLast``1(``0[],System.Func{``0,System.Boolean})
  id: FindLast``1(``0[],System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindLast<TSource>(TSource[], Func<TSource, bool>)
  nameWithType: ArrayExtensions.FindLast<TSource>(TSource[], Func<TSource, bool>)
  fullName: CSharpPlus.ArrayExtensions.FindLast<TSource>(TSource[], System.Func<TSource, bool>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire Array.
  example: []
  syntax:
    content: public static TSource? FindLast<TSource>(this TSource[] @this, Func<TSource, bool> predicate)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}'
    content.vb: Public Shared Function FindLast(Of TSource)(this As TSource(), predicate As Func(Of TSource, Boolean)) As TSource
  overload: CSharpPlus.ArrayExtensions.FindLast*
  nameWithType.vb: ArrayExtensions.FindLast(Of TSource)(TSource(), Func(Of TSource, Boolean))
  fullName.vb: CSharpPlus.ArrayExtensions.FindLast(Of TSource)(TSource(), System.Func(Of TSource, Boolean))
  name.vb: FindLast(Of TSource)(TSource(), Func(Of TSource, Boolean))
- uid: CSharpPlus.ArrayExtensions.FindIndex``1(``0[],System.Func{``0,System.Boolean})
  commentId: M:CSharpPlus.ArrayExtensions.FindIndex``1(``0[],System.Func{``0,System.Boolean})
  id: FindIndex``1(``0[],System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindIndex<TSource>(TSource[], Func<TSource, bool>)
  nameWithType: ArrayExtensions.FindIndex<TSource>(TSource[], Func<TSource, bool>)
  fullName: CSharpPlus.ArrayExtensions.FindIndex<TSource>(TSource[], System.Func<TSource, bool>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire Array.
  example: []
  syntax:
    content: public static int FindIndex<TSource>(this TSource[] @this, Func<TSource, bool> predicate)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
    content.vb: Public Shared Function FindIndex(Of TSource)(this As TSource(), predicate As Func(Of TSource, Boolean)) As Integer
  overload: CSharpPlus.ArrayExtensions.FindIndex*
  nameWithType.vb: ArrayExtensions.FindIndex(Of TSource)(TSource(), Func(Of TSource, Boolean))
  fullName.vb: CSharpPlus.ArrayExtensions.FindIndex(Of TSource)(TSource(), System.Func(Of TSource, Boolean))
  name.vb: FindIndex(Of TSource)(TSource(), Func(Of TSource, Boolean))
- uid: CSharpPlus.ArrayExtensions.FindLastIndex``1(``0[],System.Func{``0,System.Boolean})
  commentId: M:CSharpPlus.ArrayExtensions.FindLastIndex``1(``0[],System.Func{``0,System.Boolean})
  id: FindLastIndex``1(``0[],System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: FindLastIndex<TSource>(TSource[], Func<TSource, bool>)
  nameWithType: ArrayExtensions.FindLastIndex<TSource>(TSource[], Func<TSource, bool>)
  fullName: CSharpPlus.ArrayExtensions.FindLastIndex<TSource>(TSource[], System.Func<TSource, bool>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire Array.
  example: []
  syntax:
    content: public static int FindLastIndex<TSource>(this TSource[] @this, Func<TSource, bool> predicate)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
    typeParameters:
    - id: TSource
    return:
      type: System.Int32
    content.vb: Public Shared Function FindLastIndex(Of TSource)(this As TSource(), predicate As Func(Of TSource, Boolean)) As Integer
  overload: CSharpPlus.ArrayExtensions.FindLastIndex*
  nameWithType.vb: ArrayExtensions.FindLastIndex(Of TSource)(TSource(), Func(Of TSource, Boolean))
  fullName.vb: CSharpPlus.ArrayExtensions.FindLastIndex(Of TSource)(TSource(), System.Func(Of TSource, Boolean))
  name.vb: FindLastIndex(Of TSource)(TSource(), Func(Of TSource, Boolean))
- uid: CSharpPlus.ArrayExtensions.SortBy``2(``0[],System.Func{``0,``1})
  commentId: M:CSharpPlus.ArrayExtensions.SortBy``2(``0[],System.Func{``0,``1})
  id: SortBy``2(``0[],System.Func{``0,``1})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: SortBy<TSource, TKey>(TSource[], Func<TSource, TKey>)
  nameWithType: ArrayExtensions.SortBy<TSource, TKey>(TSource[], Func<TSource, TKey>)
  fullName: CSharpPlus.ArrayExtensions.SortBy<TSource, TKey>(TSource[], System.Func<TSource, TKey>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Sorts the elements of an array in ascending order according to a key.
  example: []
  syntax:
    content: 'public static TSource[] SortBy<TSource, TKey>(this TSource[] @this, Func<TSource, TKey> selector) where TKey : IComparable<TKey>'
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: selector
      type: System.Func{{TSource},{TKey}}
    typeParameters:
    - id: TSource
    - id: TKey
    return:
      type: '{TSource}[]'
    content.vb: Public Shared Function SortBy(Of TSource, TKey As IComparable(Of TKey))(this As TSource(), selector As Func(Of TSource, TKey)) As TSource()
  overload: CSharpPlus.ArrayExtensions.SortBy*
  nameWithType.vb: ArrayExtensions.SortBy(Of TSource, TKey)(TSource(), Func(Of TSource, TKey))
  fullName.vb: CSharpPlus.ArrayExtensions.SortBy(Of TSource, TKey)(TSource(), System.Func(Of TSource, TKey))
  name.vb: SortBy(Of TSource, TKey)(TSource(), Func(Of TSource, TKey))
- uid: CSharpPlus.ArrayExtensions.Sort``1(``0[])
  commentId: M:CSharpPlus.ArrayExtensions.Sort``1(``0[])
  id: Sort``1(``0[])
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: Sort<TSource>(TSource[])
  nameWithType: ArrayExtensions.Sort<TSource>(TSource[])
  fullName: CSharpPlus.ArrayExtensions.Sort<TSource>(TSource[])
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Sorts the elements of an array in ascending order.
  example: []
  syntax:
    content: public static TSource[] Sort<TSource>(this TSource[] @this)
    parameters:
    - id: this
      type: '{TSource}[]'
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}[]'
    content.vb: Public Shared Function Sort(Of TSource)(this As TSource()) As TSource()
  overload: CSharpPlus.ArrayExtensions.Sort*
  nameWithType.vb: ArrayExtensions.Sort(Of TSource)(TSource())
  fullName.vb: CSharpPlus.ArrayExtensions.Sort(Of TSource)(TSource())
  name.vb: Sort(Of TSource)(TSource())
- uid: CSharpPlus.ArrayExtensions.ConcatArray``1(``0[],``0[])
  commentId: M:CSharpPlus.ArrayExtensions.ConcatArray``1(``0[],``0[])
  id: ConcatArray``1(``0[],``0[])
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: ConcatArray<TSource>(TSource[], TSource[])
  nameWithType: ArrayExtensions.ConcatArray<TSource>(TSource[], TSource[])
  fullName: CSharpPlus.ArrayExtensions.ConcatArray<TSource>(TSource[], TSource[])
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Sorts the elements of an array in ascending order.
  example: []
  syntax:
    content: public static TSource[] ConcatArray<TSource>(this TSource[] @this, TSource[] other)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: other
      type: '{TSource}[]'
    typeParameters:
    - id: TSource
    return:
      type: '{TSource}[]'
    content.vb: Public Shared Function ConcatArray(Of TSource)(this As TSource(), other As TSource()) As TSource()
  overload: CSharpPlus.ArrayExtensions.ConcatArray*
  nameWithType.vb: ArrayExtensions.ConcatArray(Of TSource)(TSource(), TSource())
  fullName.vb: CSharpPlus.ArrayExtensions.ConcatArray(Of TSource)(TSource(), TSource())
  name.vb: ConcatArray(Of TSource)(TSource(), TSource())
- uid: CSharpPlus.ArrayExtensions.ConvertAll``2(``0[],System.Func{``0,``1})
  commentId: M:CSharpPlus.ArrayExtensions.ConvertAll``2(``0[],System.Func{``0,``1})
  id: ConvertAll``2(``0[],System.Func{``0,``1})
  isExtensionMethod: true
  parent: CSharpPlus.ArrayExtensions
  langs:
  - csharp
  - vb
  name: ConvertAll<TSource, TResult>(TSource[], Func<TSource, TResult>)
  nameWithType: ArrayExtensions.ConvertAll<TSource, TResult>(TSource[], Func<TSource, TResult>)
  fullName: CSharpPlus.ArrayExtensions.ConvertAll<TSource, TResult>(TSource[], System.Func<TSource, TResult>)
  type: Method
  source:
    href: https://github.com/lucasteles/CSharpPlus/blob/master/src/ArrayExtensions.cs
  assemblies:
  - CSharpPlus
  namespace: CSharpPlus
  summary: Projects each element of an array into a new form.
  example: []
  syntax:
    content: public static TResult[] ConvertAll<TSource, TResult>(this TSource[] @this, Func<TSource, TResult> selector)
    parameters:
    - id: this
      type: '{TSource}[]'
    - id: selector
      type: System.Func{{TSource},{TResult}}
    typeParameters:
    - id: TSource
    - id: TResult
    return:
      type: '{TResult}[]'
    content.vb: Public Shared Function ConvertAll(Of TSource, TResult)(this As TSource(), selector As Func(Of TSource, TResult)) As TResult()
  overload: CSharpPlus.ArrayExtensions.ConvertAll*
  nameWithType.vb: ArrayExtensions.ConvertAll(Of TSource, TResult)(TSource(), Func(Of TSource, TResult))
  fullName.vb: CSharpPlus.ArrayExtensions.ConvertAll(Of TSource, TResult)(TSource(), System.Func(Of TSource, TResult))
  name.vb: ConvertAll(Of TSource, TResult)(TSource(), Func(Of TSource, TResult))
references:
- uid: CSharpPlus
  commentId: N:CSharpPlus
  isExternal: true
  href: CSharpPlus.html
  name: CSharpPlus
  nameWithType: CSharpPlus
  fullName: CSharpPlus
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: CSharpPlus.ArrayExtensions.FindAll*
  commentId: Overload:CSharpPlus.ArrayExtensions.FindAll
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_FindAll__1___0___System_Func___0_System_Boolean__
  name: FindAll
  nameWithType: ArrayExtensions.FindAll
  fullName: CSharpPlus.ArrayExtensions.FindAll
- uid: '{TSource}[]'
  isExternal: true
  name: TSource[]
  nameWithType: TSource[]
  fullName: TSource[]
  nameWithType.vb: TSource()
  fullName.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
  - name: '['
  - name: ']'
  spec.vb:
  - name: TSource
  - name: (
  - name: )
- uid: System.Func{{TSource},System.Boolean}
  commentId: T:System.Func{``0,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, bool>
  nameWithType: Func<TSource, bool>
  fullName: System.Func<TSource, bool>
  nameWithType.vb: Func(Of TSource, Boolean)
  fullName.vb: System.Func(Of TSource, Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: CSharpPlus.ArrayExtensions.Exist*
  commentId: Overload:CSharpPlus.ArrayExtensions.Exist
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_Exist__1___0___System_Func___0_System_Boolean__
  name: Exist
  nameWithType: ArrayExtensions.Exist
  fullName: CSharpPlus.ArrayExtensions.Exist
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: CSharpPlus.ArrayExtensions.Find*
  commentId: Overload:CSharpPlus.ArrayExtensions.Find
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_Find__1___0___System_Func___0_System_Boolean__
  name: Find
  nameWithType: ArrayExtensions.Find
  fullName: CSharpPlus.ArrayExtensions.Find
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: CSharpPlus.ArrayExtensions.FindLast*
  commentId: Overload:CSharpPlus.ArrayExtensions.FindLast
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_FindLast__1___0___System_Func___0_System_Boolean__
  name: FindLast
  nameWithType: ArrayExtensions.FindLast
  fullName: CSharpPlus.ArrayExtensions.FindLast
- uid: CSharpPlus.ArrayExtensions.FindIndex*
  commentId: Overload:CSharpPlus.ArrayExtensions.FindIndex
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_FindIndex__1___0___System_Func___0_System_Boolean__
  name: FindIndex
  nameWithType: ArrayExtensions.FindIndex
  fullName: CSharpPlus.ArrayExtensions.FindIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: CSharpPlus.ArrayExtensions.FindLastIndex*
  commentId: Overload:CSharpPlus.ArrayExtensions.FindLastIndex
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_FindLastIndex__1___0___System_Func___0_System_Boolean__
  name: FindLastIndex
  nameWithType: ArrayExtensions.FindLastIndex
  fullName: CSharpPlus.ArrayExtensions.FindLastIndex
- uid: CSharpPlus.ArrayExtensions.SortBy*
  commentId: Overload:CSharpPlus.ArrayExtensions.SortBy
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_SortBy__2___0___System_Func___0___1__
  name: SortBy
  nameWithType: ArrayExtensions.SortBy
  fullName: CSharpPlus.ArrayExtensions.SortBy
- uid: System.Func{{TSource},{TKey}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, TKey>
  nameWithType: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
  fullName.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TKey
  - name: )
- uid: CSharpPlus.ArrayExtensions.Sort*
  commentId: Overload:CSharpPlus.ArrayExtensions.Sort
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_Sort__1___0___
  name: Sort
  nameWithType: ArrayExtensions.Sort
  fullName: CSharpPlus.ArrayExtensions.Sort
- uid: CSharpPlus.ArrayExtensions.ConcatArray*
  commentId: Overload:CSharpPlus.ArrayExtensions.ConcatArray
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_ConcatArray__1___0_____0___
  name: ConcatArray
  nameWithType: ArrayExtensions.ConcatArray
  fullName: CSharpPlus.ArrayExtensions.ConcatArray
- uid: CSharpPlus.ArrayExtensions.ConvertAll*
  commentId: Overload:CSharpPlus.ArrayExtensions.ConvertAll
  isExternal: true
  href: CSharpPlus.ArrayExtensions.html#CSharpPlus_ArrayExtensions_ConvertAll__2___0___System_Func___0___1__
  name: ConvertAll
  nameWithType: ArrayExtensions.ConvertAll
  fullName: CSharpPlus.ArrayExtensions.ConvertAll
- uid: System.Func{{TSource},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<TSource, TResult>
  nameWithType: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
  fullName.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: TSource
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: '{TResult}[]'
  isExternal: true
  name: TResult[]
  nameWithType: TResult[]
  fullName: TResult[]
  nameWithType.vb: TResult()
  fullName.vb: TResult()
  name.vb: TResult()
  spec.csharp:
  - name: TResult
  - name: '['
  - name: ']'
  spec.vb:
  - name: TResult
  - name: (
  - name: )
